module top_level (
    input  [17:0] SW,              // Switches for input control
    input  [3:0]  KEY,             // Keys for reset and control
    input         CLOCK_50,        // 50 MHz clock input
    output [17:0] LEDR             // Red LEDs for status and data
);

    // Internal signals
    logic rst, start;
    logic [7:0] json_len;
    logic [255:0] json_flat;
    logic GPIO_5, done;
    logic [17:0] led_data;

    // Assign SW[0] to start signal and KEY[0] to reset signal
    assign start = SW[0];
    assign rst = ~KEY[0];  // Active-low reset

    // Hardcoded JSON string: {"T":1,"L":0.5,"R":0.5}
    assign json_flat = {
        8'h7B,  // '{'
        8'h22,  // '"'
        8'h54,  // 'T'
        8'h22,  // '"'
        8'h3A,  // ':'
        8'h31,  // '1'
        8'h2C,  // ','
        8'h22,  // '"'
        8'h4C,  // 'L'
        8'h22,  // '"'
        8'h3A,  // ':'
        8'h30,  // '0'
        8'h2E,  // '.'
        8'h35,  // '5'
        8'h2C,  // ','
        8'h22,  // '"'
        8'h52,  // 'R'
        8'h22,  // '"'
        8'h3A,  // ':'
        8'h30,  // '0'
        8'h2E,  // '.'
        8'h35,  // '5'
        8'h7D   // '}'
    };

    // JSON length: 23 bytes
    assign json_len = 23;

    // Instantiate the JSON to UART module
    json_to_uart_top uart_module (
        .clk(CLOCK_50),
        .rst(rst),
        .start(start),
        .json_flat(json_flat),
        .json_len(json_len),
        .GPIO_5(GPIO_5),
        .LEDR(led_data),
        .done(done)
    );

    // Connect LED outputs
    assign LEDR = led_data;

endmodule
